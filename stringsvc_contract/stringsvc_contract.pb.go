// Code generated by protoc-gen-go.
// source: stringsvc_contract.proto
// DO NOT EDIT!

/*
Package stringsvc_contract is a generated protocol buffer package.

It is generated from these files:
	stringsvc_contract.proto

It has these top-level messages:
	StringRequest
	StringReply
*/
package stringsvc_contract

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the message not formatted.
type StringRequest struct {
	Messagenotformatted string `protobuf:"bytes,1,opt,name=messagenotformatted" json:"messagenotformatted,omitempty"`
}

func (m *StringRequest) Reset()                    { *m = StringRequest{} }
func (m *StringRequest) String() string            { return proto.CompactTextString(m) }
func (*StringRequest) ProtoMessage()               {}
func (*StringRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the message formatted
type StringReply struct {
	Messageformatted string `protobuf:"bytes,1,opt,name=messageformatted" json:"messageformatted,omitempty"`
}

func (m *StringReply) Reset()                    { *m = StringReply{} }
func (m *StringReply) String() string            { return proto.CompactTextString(m) }
func (*StringReply) ProtoMessage()               {}
func (*StringReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*StringRequest)(nil), "stringsvc_contract.StringRequest")
	proto.RegisterType((*StringReply)(nil), "stringsvc_contract.StringReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Stringsvc service

type StringsvcClient interface {
	// Returns string in uppercase
	UpperCase(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringReply, error)
	// Returns string in lowercase
	LowerCase(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringReply, error)
}

type stringsvcClient struct {
	cc *grpc.ClientConn
}

func NewStringsvcClient(cc *grpc.ClientConn) StringsvcClient {
	return &stringsvcClient{cc}
}

func (c *stringsvcClient) UpperCase(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := grpc.Invoke(ctx, "/stringsvc_contract.Stringsvc/UpperCase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringsvcClient) LowerCase(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := grpc.Invoke(ctx, "/stringsvc_contract.Stringsvc/LowerCase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stringsvc service

type StringsvcServer interface {
	// Returns string in uppercase
	UpperCase(context.Context, *StringRequest) (*StringReply, error)
	// Returns string in lowercase
	LowerCase(context.Context, *StringRequest) (*StringReply, error)
}

func RegisterStringsvcServer(s *grpc.Server, srv StringsvcServer) {
	s.RegisterService(&_Stringsvc_serviceDesc, srv)
}

func _Stringsvc_UpperCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsvcServer).UpperCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringsvc_contract.Stringsvc/UpperCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsvcServer).UpperCase(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stringsvc_LowerCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsvcServer).LowerCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringsvc_contract.Stringsvc/LowerCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsvcServer).LowerCase(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stringsvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stringsvc_contract.Stringsvc",
	HandlerType: (*StringsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpperCase",
			Handler:    _Stringsvc_UpperCase_Handler,
		},
		{
			MethodName: "LowerCase",
			Handler:    _Stringsvc_LowerCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("stringsvc_contract.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0x2f, 0x2e, 0x4b, 0x8e, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc2, 0x94, 0x51, 0x72, 0xe4, 0xe2, 0x0d, 0x06, 0x8b, 0x06,
	0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x19, 0x70, 0x09, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6,
	0xa7, 0xe6, 0xe5, 0x97, 0xa4, 0xe5, 0x17, 0xe5, 0x26, 0x96, 0x94, 0xa4, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x61, 0x93, 0x52, 0xb2, 0xe4, 0xe2, 0x86, 0x19, 0x51, 0x90, 0x53, 0x29,
	0xa4, 0xc5, 0x25, 0x00, 0x55, 0x85, 0xae, 0x1b, 0x43, 0xdc, 0x68, 0x23, 0x23, 0x17, 0x67, 0x30,
	0xcc, 0x51, 0x42, 0x81, 0x5c, 0x9c, 0xa1, 0x05, 0x05, 0xa9, 0x45, 0xce, 0x89, 0xc5, 0xa9, 0x42,
	0x8a, 0x7a, 0x58, 0xfc, 0x81, 0xe2, 0x54, 0x29, 0x79, 0x7c, 0x4a, 0x0a, 0x72, 0x2a, 0x95, 0x18,
	0x40, 0x46, 0xfa, 0xe4, 0x97, 0x53, 0xd3, 0x48, 0x27, 0x65, 0x2e, 0x2c, 0xe1, 0xe8, 0x04, 0x0d,
	0x82, 0x00, 0x50, 0x40, 0x07, 0x30, 0x26, 0xb1, 0x81, 0x43, 0xdc, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x4b, 0x67, 0xfe, 0x60, 0x8d, 0x01, 0x00, 0x00,
}
